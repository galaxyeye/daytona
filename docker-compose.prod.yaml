version: '3.8'

services:
  # Nginx 反向代理和负载均衡
  nginx:
    image: nginx:alpine
    container_name: daytona-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
      - dashboard
    restart: unless-stopped
    networks:
      - daytona-network

  # API 服务
  api:
    image: daytona-api:${API_VERSION:-latest}
    container_name: daytona-api
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-daytona}
      - DB_USER=${DB_USER:-daytona}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - DEX_ISSUER_URL=http://dex:5556/dex
      - DEX_CLIENT_ID=${DEX_CLIENT_ID:-daytona}
      - DEX_CLIENT_SECRET=${DEX_CLIENT_SECRET}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - postgres
      - redis
      - minio
      - dex
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - daytona-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Dashboard 前端服务
  dashboard:
    image: daytona-dashboard:${DASHBOARD_VERSION:-latest}
    container_name: daytona-dashboard
    environment:
      - VITE_API_URL=${API_BASE_URL:-http://localhost/api}
      - VITE_DEX_URL=${DEX_URL:-http://localhost:5556}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - daytona-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # 文档服务
  docs:
    image: daytona-docs:${DOCS_VERSION:-latest}
    container_name: daytona-docs
    environment:
      - PUBLIC_WEB_URL=${DOCS_URL:-http://localhost/docs}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - daytona-network

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: daytona-postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-daytona}
      - POSTGRES_USER=${DB_USER:-daytona}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-daytona} -d ${DB_NAME:-daytona}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - daytona-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: daytona-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - daytona-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    container_name: daytona-minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_IDENTITY_STS_EXPIRY=24h
    volumes:
      - minio_data:/data
      - ./config/minio:/root/.minio
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - daytona-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Dex OAuth 认证服务
  dex:
    image: dexidp/dex:v2.42.0
    container_name: daytona-dex
    volumes:
      - ./config/dex.yaml:/etc/dex/config.yaml
      - dex_data:/var/dex
    command: ['dex', 'serve', '/etc/dex/config.yaml']
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5556/dex/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - daytona-network

  # Jaeger 分布式链路追踪
  jaeger:
    image: jaegertracing/all-in-one:1.67.0
    container_name: daytona-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    volumes:
      - jaeger_data:/tmp
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - daytona-network

  # Elasticsearch (用于 Jaeger 存储)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: daytona-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - daytona-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # 日志收集器 (Fluentd)
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: daytona-fluentd
    volumes:
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf
      - ./logs:/fluentd/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - daytona-network

  # 监控服务 (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: daytona-prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - daytona-network

  # 监控仪表板 (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: daytona-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - daytona-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  dex_data:
    driver: local
  jaeger_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  daytona-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
