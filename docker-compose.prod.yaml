version: '3.8'

# Daytona Production Docker Compose Configuration
# 生产环境部署配置

networks:
  daytona-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  grafana_data:
    driver: local
  registry_data:
    driver: local
  jaeger_data:
    driver: local

services:
  # =============================================================================
  # 数据库服务
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: daytona-postgres
    restart: unless-stopped
    networks:
      - daytona-network
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # =============================================================================
  # 缓存服务
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: daytona-redis
    restart: unless-stopped
    networks:
      - daytona-network
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # =============================================================================
  # 对象存储服务
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: daytona-minio
    restart: unless-stopped
    networks:
      - daytona-network
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # =============================================================================
  # 身份认证服务
  # =============================================================================
  dex:
    image: dexidp/dex:v2.42.0
    container_name: daytona-dex
    restart: unless-stopped
    networks:
      - daytona-network
    volumes:
      - ./config/dex/config.yaml:/etc/dex/config.yaml:ro
      - ./config/dex/tmp:/tmp
    command: ['dex', 'serve', '/etc/dex/config.yaml']
    ports:
      - "5556:5556"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5556/dex/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # =============================================================================
  # 监控和追踪服务
  # =============================================================================
  jaeger:
    image: docker.m.daocloud.io/jaegertracing/all-in-one:1.67.0
    container_name: daytona-jaeger
    restart: unless-stopped
    networks:
      - daytona-network
    environment:
      COLLECTOR_OTLP_ENABLED: true
    volumes:
      - jaeger_data:/badger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # agent UDP
      - "6832:6832/udp"  # agent UDP
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  grafana:
    image: grafana/grafana:latest
    container_name: daytona-grafana
    restart: unless-stopped
    networks:
      - daytona-network
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_SERVER_HTTP_PORT: 3050
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3050:3050"
    user: "472"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # =============================================================================
  # Docker Registry
  # =============================================================================
  registry:
    image: registry:2.8.2
    container_name: daytona-registry
    restart: unless-stopped
    networks:
      - daytona-network
    environment:
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin: '[*]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Methods: '[HEAD,GET,OPTIONS,DELETE]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Credentials: '[true]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Headers: '[Authorization,Accept,Cache-Control]'
      REGISTRY_HTTP_HEADERS_Access-Control-Expose-Headers: '[Docker-Content-Digest]'
      REGISTRY_STORAGE_DELETE_ENABLED: 'true'
    volumes:
      - registry_data:/var/lib/registry
    ports:
      - "5000:5000"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  registry-ui:
    image: joxit/docker-registry-ui:main
    container_name: daytona-registry-ui
    restart: unless-stopped
    networks:
      - daytona-network
    environment:
      SINGLE_REGISTRY: 'true'
      REGISTRY_TITLE: 'Daytona Docker Registry'
      DELETE_IMAGES: 'true'
      SHOW_CONTENT_DIGEST: 'true'
      NGINX_PROXY_PASS_URL: http://registry:5000
      SHOW_CATALOG_NB_TAGS: 'true'
      CATALOG_MIN_BRANCHES: 1
      CATALOG_MAX_BRANCHES: 1
      TAGLIST_PAGE_SIZE: 100
      REGISTRY_SECURED: 'false'
      CATALOG_ELEMENTS_LIMIT: 1000
    ports:
      - "5001:80"
    depends_on:
      - registry
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # =============================================================================
  # 邮件服务 (开发/测试用)
  # =============================================================================
  maildev:
    image: maildev/maildev:latest
    container_name: daytona-maildev
    restart: unless-stopped
    networks:
      - daytona-network
    ports:
      - "1080:1080"  # Web UI
      - "1025:1025"  # SMTP
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # =============================================================================
  # Daytona 应用服务
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: production
    image: daytona-api:latest
    container_name: daytona-api
    restart: unless-stopped
    networks:
      - daytona-network
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT}
    volumes:
      - ./logs/api:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  dashboard:
    build:
      context: .
      dockerfile: apps/dashboard/Dockerfile
      target: production
    image: daytona-dashboard:latest
    container_name: daytona-dashboard
    restart: unless-stopped
    networks:
      - daytona-network
    volumes:
      - ./logs/dashboard:/var/log/nginx
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  docs:
    build:
      context: .
      dockerfile: apps/docs/Dockerfile
    image: daytona-docs:latest
    container_name: daytona-docs
    restart: unless-stopped
    networks:
      - daytona-network
    environment:
      PUBLIC_WEB_URL: ${FRONTEND_URL}
      FUNCTIONS_PORT: 4000
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  proxy:
    build:
      context: .
      dockerfile: apps/proxy/Dockerfile
    image: daytona-proxy:latest
    container_name: daytona-proxy
    restart: unless-stopped
    networks:
      - daytona-network
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - dashboard
      - docs
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  daemon:
    build:
      context: .
      dockerfile: apps/daemon/Dockerfile
    image: daytona-daemon:latest
    container_name: daytona-daemon
    restart: unless-stopped
    networks:
      - daytona-network
    environment:
      API_URL: http://api:3001
      REGISTRY_URL: registry:5000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/workspaces:/workspaces
      - ./logs/daemon:/app/logs
    depends_on:
      - api
      - registry
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  runner:
    build:
      context: .
      dockerfile: apps/runner/Dockerfile
    image: daytona-runner:latest
    container_name: daytona-runner
    restart: unless-stopped
    networks:
      - daytona-network
    environment:
      DAEMON_URL: http://daemon:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs/runner:/app/logs
    depends_on:
      - daemon
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
