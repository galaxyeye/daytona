# Mise configuration for the Daytona project
# This file configures development tools and environment for the entire monorepo

[tools]
# Core language runtimes
node = "20.18.1"        # LTS version for stability
go = "1.24.4"           # Match system Go version
python = "3.11.11"      # Compatible with project requirements

# Development tools
jq = "1.7.1"           # JSON processing
# Cross-platform utilities
"npm:rimraf" = "latest" # Cross-platform rm -rf alternative

# Optional tools for development (comment out problematic ones for now)
# helm = "latest"         # Kubernetes package manager
# kubectl = "latest"      # Kubernetes CLI
# terraform = "latest"    # Infrastructure as code

[env]
# Go environment
GOPATH = "{{config_root}}/go"
GOPROXY = "https://proxy.golang.org,direct"
GOSUMDB = "sum.golang.org"
CGO_ENABLED = "1"

# Node.js environment
NODE_ENV = "development"
NODE_OPTIONS = "--max-old-space-size=4096"

# Python environment
PYTHONPATH = "{{config_root}}"
POETRY_VENV_IN_PROJECT = "true"
POETRY_CACHE_DIR = "{{config_root}}/.cache/pypoetry"

# Development environment
EDITOR = "code"
BROWSER = "google-chrome"

[tasks.setup]
description = "Initial project setup"
run = [
  "echo 'Setting up Daytona development environment...'",
  "yarn install",
  "poetry install",
  "go mod download",
  "echo 'Setup complete! Use mise run dev to start development servers.'"
]

[tasks.install]
description = "Install all dependencies"
run = [
  "yarn install --frozen-lockfile",
  "poetry install --no-dev",
  "go mod download"
]

[tasks.install-dev]
description = "Install all dependencies including dev dependencies"
run = [
  "yarn install",
  "poetry install",
  "go mod download"
]

[tasks.build]
description = "Build all projects"
run = "yarn build"

[tasks.build-prod]
description = "Build all projects for production"
run = "yarn build:production"

[tasks.dev]
description = "Start development servers"
run = "yarn serve"

[tasks.dev-skip-runner]
description = "Start development servers (skip runner)"
run = "yarn serve:skip-runner"

[tasks.dev-skip-proxy]
description = "Start development servers (skip proxy)"
run = "yarn serve:skip-proxy"

[tasks.test]
description = "Run all tests"
run = [
  "yarn lint:ts",
  "yarn lint:py",
  "yarn test"
]

[tasks.test-watch]
description = "Run tests in watch mode"
run = "yarn test --watch"

[tasks.format]
description = "Format all code"
run = "yarn format"

[tasks.lint]
description = "Lint all code"
run = "yarn lint"

[tasks.lint-fix]
description = "Lint and fix all code"
run = "yarn lint:fix"

[tasks.generate]
description = "Generate API clients"
run = "yarn generate:api-client"

[tasks.docs]
description = "Generate documentation"
run = "yarn docs"

[tasks.clean]
description = "Clean all build artifacts"
run = [
  "echo 'Cleaning build artifacts...'",
  "node scripts/cleanup.js clean",
  "yarn cache clean",
  "go clean -cache -modcache -testcache",
  "poetry cache clear --all pypi",
  "echo 'Clean complete!'"
]

[tasks.reset]
description = "Reset the entire development environment"
run = [
  "echo 'Resetting development environment...'",
  "node scripts/cleanup.js reset",
  "go clean -cache -modcache -testcache",
  "yarn cache clean",
  "poetry cache clear --all pypi",
  "echo 'Reset complete! Run mise run setup to reinstall everything.'"
]

[tasks.docker-build]
description = "Build Docker images"
run = [
  "docker build -f apps/api/Dockerfile -t daytona-api .",
  "docker build -f apps/docs/Dockerfile -t daytona-docs ."
]

[tasks.check-system]
description = "Check system compatibility and required tools"
run = [
  "node scripts/cross-platform.js info",
  "node scripts/cross-platform.js check node yarn go python docker"
]

[tasks.health]
description = "Check project health and dependencies"
run = [
  "echo 'Checking project health...'",
  "mise run check-system",
  "yarn --version",
  "go version",
  "python --version",
  "echo 'Health check complete!'"
]
